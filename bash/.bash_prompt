# Use color prompt if xterm-color (or xterm-256color) is the terminal emulator. 
case "$TERM" in
    xterm-*color) color_prompt=yes;;
esac

# Force color prompt for all terminal emulators, unless tput says the terminal 
# can't do colors. Comment out `force_color_prompt` to stop this behaviour.
force_color_prompt=yes
if [[ -n "$force_color_prompt" && -z "$color_prompt" ]]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.
        color_prompt=yes
    else
    	color_prompt=
    fi
fi

# Set some ANSI color variables.
c_rst="\[\e[0m\]"   # All attributes off
c_bld="\[\e[1m\]"   # Standard bold
c_r="\[\e[31m\]"    # Red
c_b="\[\e[34m\]"    # Blue

# Username display, red if root.
if [ $(whoami) == "root" ]; then
    p_u="${c_r}\u${c_rst}${c_bld}"
else
    p_u="\u"
fi

# Hostname display, red if using ssh.
if [ $( echo $SSH_CLIENT | wc -c) -gt 1 ]; then
    p_h="${c_r}\h${c_rst}${c_bld}"
else
    p_h="\h"
fi

# Combine user and host to get [user@host]
p_uh="[${p_u}@${p_h}]─"

# Working directory
p_wd="[${c_b}\w${c_rst}${c_bld}]"

# Disable default python virtual environment notification.
export VIRTUAL_ENV_DISABLE_PROMPT=1

# This function is used in PS1 prompt to notify user when python virtualenv
# is activated.
function python_venv() {
    if [ -n "$VIRTUAL_ENV" ]; then
        venv="${VIRTUAL_ENV##*/}"
    else
        venv=""
    fi
    [ -n "$venv" ] && printf "─[\e[1;35m$venv\e[0m\e[1m]"
}

# Two line prompt that inserts a newline at the beginning of PS1 to visually 
# separate commands.
if [ -n "$color_prompt" ]; then
    PS1="\n${c_bld}┌─${p_uh}${p_wd}\$(python_venv)\n${c_bld}└──╼${c_rst} "
else
    PS1="\n┌─[\u@\h]─[\w]\n└──╼ "
fi

# Unset all global variables so they don't pollute the shell
unset color_prompt force_color_prompt c_rst c_bld c_r p_u p_h p_uh p_wd 
